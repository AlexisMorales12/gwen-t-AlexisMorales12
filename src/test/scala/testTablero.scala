package cl.uchile.dcc

import munit.FunSuite

import gwent.Componentes.Jugador.Jugador
import gwent.Componentes.Tablero.Tablero
import scala.collection.mutable
class Tablerotest extends FunSuite {
  var jugador: Jugador = _
  var tablero: Tablero = _
  override def beforeEach(context: BeforeEach): Unit = {
    jugador = new Jugador("John", "North")
    tablero = new Tablero
  }
  test("situacion de juego 1") {
    jugador.robar(jugador,13)
    jugador.jugar(jugador,0,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.length, 0)
    assertEquals(jugador.Mano.length, 13)
    jugador.jugar(jugador,1,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.length, 1)
    assertEquals(jugador.Mano.length, 12)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_Fuerza(), 2)
    jugador.jugar(jugador,1,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_Fuerza(), 3)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.Nombre, "Capitan")
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_Fuerza(), 4)
    jugador.jugar(jugador,8,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_FuerzaReal(), 3)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.Nombre, "Capitan")
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_FuerzaReal(), 4)
    jugador.jugar(jugador,1,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).Nombre, "Capitan")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).obtener_FuerzaReal(), 6)
    jugador.jugar(jugador,8,tablero)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_Fuerza(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).Nombre, "Capitan")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_Fuerza(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).Nombre, "Barbaro")
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).obtener_Fuerza(), 6)
    assertEquals(tablero.zona_cuerpo_a_cuerpo(2).obtener_FuerzaReal(), 6)
  }
  test("situacion de juego 2"){
    jugador.robar(jugador, 13)
    jugador.jugar(jugador, 0, tablero)
    assertEquals(tablero.zona_a_distancia.length, 0)
    assertEquals(jugador.Mano.length, 13)
    jugador.jugar(jugador, 7, tablero)
    assertEquals(tablero.zona_a_distancia.length, 1)
    assertEquals(jugador.Mano.length, 12)
    assertEquals(tablero.zona_a_distancia.head.Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia.head.obtener_Fuerza(), 2)
    jugador.jugar(jugador, 7, tablero)
    assertEquals(tablero.zona_a_distancia(1).Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia(1).obtener_Fuerza(), 3)
    assertEquals(tablero.zona_a_distancia.head.Nombre, "Ballestero")
    assertEquals(tablero.zona_a_distancia.head.obtener_Fuerza(), 4)
    jugador.jugar(jugador, 10, tablero)
    assertEquals(tablero.zona_a_distancia(1).Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_a_distancia(1).obtener_FuerzaReal(), 3)
    assertEquals(tablero.zona_a_distancia.head.Nombre, "Ballestero")
    assertEquals(tablero.zona_a_distancia.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_a_distancia.head.obtener_FuerzaReal(), 4)
    jugador.jugar(jugador, 7, tablero)
    assertEquals(tablero.zona_a_distancia.head.Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_a_distancia.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_a_distancia(1).Nombre, "Ballestero")
    assertEquals(tablero.zona_a_distancia(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_a_distancia(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_a_distancia(2).Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia(2).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_a_distancia(2).obtener_FuerzaReal(), 6)
    jugador.jugar(jugador, 9, tablero)
    assertEquals(tablero.zona_a_distancia.head.Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia.head.obtener_Fuerza(), 4)
    assertEquals(tablero.zona_a_distancia.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_a_distancia(1).Nombre, "Ballestero")
    assertEquals(tablero.zona_a_distancia(1).obtener_Fuerza(), 4)
    assertEquals(tablero.zona_a_distancia(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_a_distancia(2).Nombre, "Arquero")
    assertEquals(tablero.zona_a_distancia(2).obtener_Fuerza(), 6)
    assertEquals(tablero.zona_a_distancia(2).obtener_FuerzaReal(), 6)
  }
  test("situacion de juego 2") {
    jugador.robar(jugador, 13)
    jugador.jugar(jugador, 0, tablero)
    assertEquals(tablero.zona_de_asedio.length, 0)
    assertEquals(jugador.Mano.length, 13)
    jugador.jugar(jugador, 4, tablero)
    assertEquals(tablero.zona_de_asedio.length, 1)
    assertEquals(jugador.Mano.length, 12)
    assertEquals(tablero.zona_de_asedio.head.Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio.head.obtener_Fuerza(), 2)
    jugador.jugar(jugador, 4, tablero)
    assertEquals(tablero.zona_de_asedio(1).Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio(1).obtener_Fuerza(), 3)
    assertEquals(tablero.zona_de_asedio.head.Nombre, "Ariete")
    assertEquals(tablero.zona_de_asedio.head.obtener_Fuerza(), 4)
    jugador.jugar(jugador, 11, tablero)
    assertEquals(tablero.zona_de_asedio(1).Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_de_asedio(1).obtener_FuerzaReal(), 3)
    assertEquals(tablero.zona_de_asedio.head.Nombre, "Ariete")
    assertEquals(tablero.zona_de_asedio.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_de_asedio.head.obtener_FuerzaReal(), 4)
    jugador.jugar(jugador, 4, tablero)
    assertEquals(tablero.zona_de_asedio.head.Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio.head.obtener_Fuerza(), 1)
    assertEquals(tablero.zona_de_asedio.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_de_asedio(1).Nombre, "Ariete")
    assertEquals(tablero.zona_de_asedio(1).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_de_asedio(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_de_asedio(2).Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio(2).obtener_Fuerza(), 1)
    assertEquals(tablero.zona_de_asedio(2).obtener_FuerzaReal(), 6)
    jugador.jugar(jugador, 9, tablero)
    assertEquals(tablero.zona_de_asedio.head.Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio.head.obtener_Fuerza(), 4)
    assertEquals(tablero.zona_de_asedio.head.obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_de_asedio(1).Nombre, "Ariete")
    assertEquals(tablero.zona_de_asedio(1).obtener_Fuerza(), 4)
    assertEquals(tablero.zona_de_asedio(1).obtener_FuerzaReal(), 4)
    assertEquals(tablero.zona_de_asedio(2).Nombre, "Catapulta")
    assertEquals(tablero.zona_de_asedio(2).obtener_Fuerza(), 6)
    assertEquals(tablero.zona_de_asedio(2).obtener_FuerzaReal(), 6)
  }

}
